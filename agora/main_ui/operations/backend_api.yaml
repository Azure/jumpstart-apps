apiVersion: v1
kind: ConfigMap
metadata:
  name: initdb-configmap
data:
  initdb.sql: |
    -- Your SQL initialization script here
    CREATE TABLE IF NOT EXISTS products (productId SERIAL PRIMARY KEY, name text, description text, price numeric, stock int, photopath text, category text);
    CREATE TABLE IF NOT EXISTS Orders (orderID SERIAL PRIMARY KEY, orderDate timestamp, orderdetails JSON, storeId INT, cloudsynced BOOLEAN DEFAULT FALSE);
    CREATE TABLE IF NOT EXISTS checkout_type (id SERIAL PRIMARY KEY, name TEXT NOT NULL);
    CREATE TABLE IF NOT EXISTS checkout (id INTEGER PRIMARY KEY, type INTEGER REFERENCES checkout_type(id), avgprocessingtime INTEGER, closed BOOLEAN);
    CREATE TABLE IF NOT EXISTS checkout_history (timestamp TIMESTAMPTZ, checkout_id INT REFERENCES checkout(id), checkout_type INT, queue_length INT, average_wait_time_seconds INT, PRIMARY KEY (timestamp, checkout_id));
    CREATE TABLE IF NOT EXISTS cameras (id SERIAL PRIMARY KEY, name text, description text);
    CREATE TABLE IF NOT EXISTS zones (id SERIAL PRIMARY KEY, name text, description text);
    CREATE TABLE IF NOT EXISTS ovens (id SERIAL PRIMARY KEY, name text, description text);
    CREATE TABLE IF NOT EXISTS fridges (id SERIAL PRIMARY KEY, name text, description text);

    -- seeding cameras
    INSERT INTO cameras (name, description)
    SELECT *
    FROM (VALUES
        ('Camera 1', 'Entrance Camera'),
        ('Camera 2', 'Checkout Camera'),
        ('Camera 3', 'Fridge Camera'),
        ('Camera 4', 'Oven Camera')
    ) AS data
    WHERE NOT EXISTS (SELECT 1 FROM cameras);

    -- seeding zones
    INSERT INTO zones (name, description)
    SELECT *
    FROM (VALUES
        ('Zone 1', 'Fruit Section'),
        ('Zone 2', 'Vegetable Section'),
        ('Zone 3', 'Bread Section'),
        ('Zone 4', 'Dairy Section'),
        ('Zone 5', 'Beverage Section'),
        ('Zone 6', 'Snack Section'),
        ('Zone 7', 'Egg Section')
    ) AS data
    WHERE NOT EXISTS (SELECT 1 FROM zones);

    -- seeding ovens
    INSERT INTO ovens (name, description)
    SELECT *
    FROM (VALUES
        ('Oven 1', 'Bread Oven'),
        ('Oven 2', 'Pizza Oven'),
        ('Oven 3', 'Cake Oven')
    ) AS data
    WHERE NOT EXISTS (SELECT 1 FROM ovens);

    -- seeding fridges
    INSERT INTO fridges (name, description)
    SELECT *
    FROM (VALUES
        ('Fridge 1', 'Dairy Fridge'),
        ('Fridge 2', 'Meat Fridge'),
        ('Fridge 3', 'Vegetable Fridge')
    ) AS data
    WHERE NOT EXISTS (SELECT 1 FROM fridges);

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      initContainers:
      - name: init-db
        image: postgres:latest
        command: ["sh", "-c"]
        args:
          - |
            PGPASSWORD=$POSTGRES_PASSWORD
            PGUSER=$POSTGRES_USER
            export PGPASSWORD
            export PGUSER
            until pg_isready -h backend-db -p 5432 -U postgres; do
              echo "Waiting for database to be ready...";
              sleep 2;
            done;
            psql -h backend-db -U postgres -d contoso -f /docker-entrypoint-initdb.d/initdb.sql
        envFrom:
        - configMapRef:
            name: postgres-configuration
        volumeMounts:
        - mountPath: /docker-entrypoint-initdb.d
          name: initdb-script
      containers:
      - name: main-ui-backend-api
        image: agacr6b99f.azurecr.io/main-ui-backend-api:latest
        ports:
        - containerPort: 5002
        env:
        - name: DATABASE_HOST
          value: "backend-db"
        - name: DATABASE_NAME
          value: "contoso"
        - name: DATABASE_USER
          value: "postgres"
        - name: DATABASE_PASSWORD
          value: "password"
        - name: FLASK_APP
          value: "app.py"
        - name: FLASK_ENV
          value: "development"
        - name: FLASK_RUN_HOST
          value: ""
      imagePullSecrets:
      - name: acr-secret
      volumes:
      - name: initdb-script
        configMap:
          name: initdb-configmap

---

apiVersion: v1
kind: Service
metadata:
  name: backend-api
spec:
  selector:
    app: backend-api
  ports:
    - protocol: TCP
      port: 5002
      targetPort: 5002
  type: LoadBalancer